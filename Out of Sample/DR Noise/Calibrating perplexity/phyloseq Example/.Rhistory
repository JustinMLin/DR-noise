get_cluster_dist(g, 1, 2)
get_cluster_dist(g, 1, 3)
(norm(X[1,] - X[3,], type="2") + norm(X[2,] - X[3,], type="2"))/2
library(igraph)
library(cluster)
library(cccd)
get_mst = function(X) {
X_dist = as.matrix(dist(X))
graph = graph_from_adjacency_matrix(X_dist, mode="undirected", weighted=TRUE)
mst(graph)
}
get_avg_linkage_graph = function(X) {
n = length(X[,1])
g = make_graph(n=n, edges=NULL, directed=FALSE)
g = set_vertex_attr(g, name="cluster", value=1:n)
}
get_cluster_dist = function(g, id1, id2) {
cluster1 = which(V(g)$cluster == id1) # id's of vertices in cluster 1
cluster2 = which(V(g)$cluster == id2) # id's of vertices in cluster 2
total_dist = 0
for (i in 1:length(cluster1)) {
for (j in 1:length(cluster2)) {
total_dist = total_dist + norm(X[cluster1[i],] - X[cluster2[j],], type="2")
}
}
total_dist/(i*j)
}
get_cluster_dists = function(g) {
if (!any(vertex_attr_names(g) == "cluster")) {
error("get_cluster_dist: graph doesn't have assigned clusters")
}
clusters = unique(V(g)$cluster)
num_clusters = length(clusters)
dists = matrix(nrow = num_clusters*(num_clusters - 1)/2, ncol = 3)
row = 1
for (i in 1:(num_clusters-1)) {
for (j in (i+1):num_clusters) {
dists[row,] = c(i, j, get_cluster_dist(g, i, j))
row = row + 1
}
}
}
get_nng = function(X, k) {
g = nng(X, k=k, mutual=TRUE)
for (i in 1:length(E(g)[[]])) {
edge = E(g)[[i]]
head = as.numeric(head_of(g, edge))
tail = as.numeric(tail_of(g, edge))
E(g)$weight[i] = norm(X[head,] - X[tail,], type="2")
}
g
}
get_shortest_path = function(graph, from, to) {
path = shortest_paths(graph, from, to, output="both")
list(epath = path$epath[[1]],
vpath = path$vpath[[1]])
}
get_path_weights = function(path) {
epath = path$epath
if (class(epath) != "igraph.es") {
error("get_path_weights: input is not of type igraph.es")
}
num_paths = length(epath[])
weights = vector(length = num_paths)
for (i in 1:num_paths) {
weights[i] = epath[[i]]$weight
}
weights
}
get_emb_path_weights = function(X, path) {
vpath = path$vpath
if (class(vpath) != "igraph.vs") {
error("get_path_weights: input is not of type igraph.es")
}
num_paths = length(vpath) - 1
weights = vector(length = num_paths)
for (i in 1:num_paths) {
weights[i] = norm(X[vpath[i],] - X[vpath[i+1],], type="2")
}
weights
}
add_path = function(plot, df, path, path_component = 0) {
vpath = path$vpath
col = ifelse(is.null(plot$labels$colour),
"red", "black")
if (path_component != 0) {
p + geom_path(data = df[as.numeric(vpath)[1:path_component],], color = col) +
geom_path(data = df[as.numeric(vpath)[path_component:(path_component+1)],],
color = ifelse(col == "red","blue","red")) +
geom_path(data = df[as.numeric(vpath)[(path_component+1):length(vpath)],], color = col)
}
else {
p + geom_path(data = df[as.numeric(vpath),], color = col)
}
}
plot_medoid_mst = function(plot, df, Z, Z_mst, labels) {
p = plot
meds = medoids(Z, labels)
med_mst_vertices = unique(unlist(all_simple_paths(Z_mst, from = meds[1], to = meds[-1], mode = "out")))
med_mst = induced_subgraph(Z_mst, med_mst_vertices)
edge_matrix = as.matrix(med_mst, matrix.type = "edgelist")
n = length(edge_matrix[,1])
for (i in 1:n) {
p = p + geom_path(data = df[as.numeric(edge_matrix[i,]),], color = "black")
}
p
}
view_image = function(data, id) {
image(1:28,1:28, matrix(data$images[id,],nrow=28)[,28:1], col=gray(seq(0,1,0.05)), xlab="", ylab="")
}
get_cluster_dists(g)
get_cluster_dists = function(g) {
if (!any(vertex_attr_names(g) == "cluster")) {
error("get_cluster_dist: graph doesn't have assigned clusters")
}
clusters = unique(V(g)$cluster)
num_clusters = length(clusters)
dists = matrix(nrow = num_clusters*(num_clusters - 1)/2, ncol = 3)
row = 1
for (i in 1:(num_clusters-1)) {
for (j in (i+1):num_clusters) {
dists[row,] = c(clusters[i], clusters[j], get_cluster_dist(g, clusters[i], clusters[j]))
row = row + 1
}
}
}
get_cluster_dists(g)
get_cluster_dists = function(g) {
if (!any(vertex_attr_names(g) == "cluster")) {
error("get_cluster_dist: graph doesn't have assigned clusters")
}
clusters = unique(V(g)$cluster)
num_clusters = length(clusters)
dists = matrix(nrow = num_clusters*(num_clusters - 1)/2, ncol = 3)
row = 1
for (i in 1:(num_clusters-1)) {
for (j in (i+1):num_clusters) {
dists[row,] = c(clusters[i], clusters[j], get_cluster_dist(g, clusters[i], clusters[j]))
row = row + 1
}
}
dists
}
get_cluster_dists(g)
?min
?medoids
Y = matrix(c(1, 0, 0, -1), nrow = 2)
Y
medoid(Y)
medoids(Y)
medoids(Y, clustering = c(1,1))
medoids(Y, clustering = c(1,1))
medoids(Y, clustering = c(1,1))
medoids(Y, clustering = c(1,1))
medoids(Y, clustering = c(1,1))
medoids(Y, clustering = c(1,2))
medoids(X, clustering = c(1:499, 499))
c(1:499, 499)
X
dims(X)
dim(X)
medoids(X, clustering = c(1:499))
medoids(X, clustering = c(1:499, 1))
medoids(X, clustering = c(1:498, 1, 2))
medoids(X, clustering = c(1:500))
Y = matrix(c(1,1), nrow=2)
medoid(Y, clustering=1)
medoids(Y, clustering=1)
Y
Y = matrix(c(1,1), nrow=1)
Y
medoids(Y, clustering=1)
Y = matrix(c(1,1), nrow=2)
medoids(Y, clustering=c(1,2))
medoids(Y, clustering=c(1,1))
medoids(Y, clustering=c(2,2))
medoids(Y, clustering=c(0,1))
medoids(Y, clustering=c(1))
medoids(Y, clustering=c(1,1))
Y = matrix(c(1,1), nrow=4)
medoids(Y, clustering=c(1,2,2,3))
Y
Y = matrix(c(1,2,3,4), nrow=4)
medoids(Y, clustering=c(1,2,2,3))
Y
medoids(Y, clustering=c(1,2,2,3))
medoids(Y, clustering=c(1,2,2,3))
medoids
pam
?pam
pam
?pam
?pam
medoids
dist(X)
rowSums(dist(X))
rowSums(as.matrix(dist(X)))
as.matrix(dist(X))
dim(as.matrix(dist(X)))
g
cluster_dists = get_cluster_dists(g)
i = which(cluster_dists[,3] == min(cluster_dists[,3]))
cluster_dists
i
id1 = cluster_dists[i,1]
id2 = cluster_dists[i,2]
id1
id2
which(V(g) == id1)
which(V(g) == id2)
get_medoid(X, point_ids) {
get_medoid(X, point_ids) {
get_medoid = function(X, point_ids) {
total_dists = rowSums(as.matrix(dist(X)))
medoid = which(total_dists = min(total_dists))
point_ids[medoid]
}
get_medoid(X[which(V(g) == id1),])
get_medoid = function(X, point_ids) {
total_dists = rowSums(as.matrix(dist(X)))
medoid = which(total_dists == min(total_dists))
point_ids[medoid]
}
get_medoid(X[which(V(g) == id1),])
cluster1_vertex_ids = which(V(g) == id1)
cluster2_vertex_ids = which(V(g) == id2)
cluster1_vertex_ids
get_medoid(X[cluster1_vertex_ids,],cluster1_vertex_ids)
X[cluster1_vertex_ids,]
dist(X[cluster1_vertex_ids,])
X[1,]
X[1:2,]
X[1,]
as.matrix(X[1,])
cluster1_vertex_ids = which(V(g) == 1)
cluster1_vertex_ids
V(g)
cluster1_vertex_ids = which(V(g)$cluster == 1)
cluster1_vertex_ids
get_medoid(X[cluster1_vertex_ids,], cluster1_vertex_ids)
X[cluster1_vertex_ids,]
V(g)[5] == 1
V(g)[5] = 1
V(g)$cluster[5] = 1
cluster1_vertex_ids = which(V(g)$cluster == 1)
get_medoid(X[cluster1_vertex_ids,], cluster1_vertex_ids)
is.matrix(X)
is.matrix(c(1,2))
is.matrix(matrix(c(1,2), nrow=1))
id2
cluster2_vertex_ids = which(V(g)$cluster == id2) # vertex id's of points in cluster 2
get_medoid(X[cluster2_vertex_ids,], cluster2_vertex_ids)
cluster2_vertex_ids
get_medoid = function(X, point_ids) {
if (length(point_ids) == 1) { # check if X is one point
point_ids
}
total_dists = rowSums(as.matrix(dist(X)))
medoid = which(total_dists == min(total_dists))
point_ids[medoid]
}
get_medoid(X[cluster2_vertex_ids,], cluster2_vertex_ids)
get_medoid = function(X, point_ids) {
if (length(point_ids) == 1) { # check if X is one point
return(point_ids)
}
total_dists = rowSums(as.matrix(dist(X)))
medoid = which(total_dists == min(total_dists))
point_ids[medoid]
}
get_medoid(X[cluster2_vertex_ids,], cluster2_vertex_ids)
V(g)$id
V(g)$name
V(g)$cluster
norm(X[1,]-X[2,], type="2")
sqrt(sum(X[1,]-X[2,])^2)
X[1,]-X[2,]
(X[1,]-X[2,])^2
sum(X[1,]-X[2,])^2
sqrt(sum(X[1,]-X[2,])^2)
?type
?norm
norm(X[1,]-X[2,], type="f")
norm(X[1,]-X[2,], type="Euclidean")
norm(X[1,]-X[2,], type="2")
sqrt(sum((X[1,]-X[2,])^2)
)
inf
infinity
Inf
cluster_dists = get_cluster_dists(g)
min_row = which(cluster_dists[,3] == min(cluster_dists[,3]))
id1 = cluster_dists[min_row,1] # cluster id of first cluster
id2 = cluster_dists[min_row,2] # cluster id of second cluster
cluster1_vertex_ids = which(V(g)$cluster == id1) # vertex ids of points in cluster 1
cluster2_vertex_ids = which(V(g)$cluster == id2) # vertex ids of points in cluster 2
medoid1_ids = get_medoid(X[cluster1_vertex_ids,], cluster1_vertex_ids) # vertex id(s) of cluster 1 medoid
medoid2_ids = get_medoid(X[cluster2_vertex_ids,], cluster2_vertex_ids) # vertex id(s) of cluster 2 medoid
# find minimum distance between medoids (if one of the clusters has multiple)
min_dist = Inf
for (i in medoid1_ids) {
for (j in medoid2_ids) {
dist = norm(X[i,] - X[j,], type="2")
if(dist < min_dist) {
medoid1_id = i
medoid2_id = j
min_dist = dist
}
}
}
medoid1_ids
medoid1_id
medoid2_ids
medoid2_id
id1
id1 = 1
id2 = cluster_dists[min_row,2] # cluster id of second cluster
cluster1_vertex_ids = which(V(g)$cluster == id1) # vertex ids of points in cluster 1
cluster2_vertex_ids = which(V(g)$cluster == id2) # vertex ids of points in cluster 2
medoid1_ids = get_medoid(X[cluster1_vertex_ids,], cluster1_vertex_ids) # vertex id(s) of cluster 1 medoid
medoid2_ids = get_medoid(X[cluster2_vertex_ids,], cluster2_vertex_ids) # vertex id(s) of cluster 2 medoid
# find minimum distance between medoids (if one of the clusters has multiple)
min_dist = Inf
for (i in medoid1_ids) {
for (j in medoid2_ids) {
dist = norm(X[i,] - X[j,], type="2")
if(dist < min_dist) {
medoid1_id = i
medoid2_id = j
min_dist = dist
}
}
}
medoid1_ids
V(g)$cluster
V(g)$cluster[4] = 3
V(g)$cluster
id2 = 3
cluster1_vertex_ids = which(V(g)$cluster == id1) # vertex ids of points in cluster 1
cluster2_vertex_ids = which(V(g)$cluster == id2) # vertex ids of points in cluster 2
medoid1_ids = get_medoid(X[cluster1_vertex_ids,], cluster1_vertex_ids) # vertex id(s) of cluster 1 medoid
medoid2_ids = get_medoid(X[cluster2_vertex_ids,], cluster2_vertex_ids) # vertex id(s) of cluster 2 medoid
# find minimum distance between medoids (if one of the clusters has multiple)
min_dist = Inf
for (i in medoid1_ids) {
for (j in medoid2_ids) {
dist = norm(X[i,] - X[j,], type="2")
if(dist < min_dist) {
medoid1_id = i
medoid2_id = j
min_dist = dist
}
}
}
medoid2_ids
medoid2_id
?check
graph = add_edges(g, edges=c(medoid1_id, medoid2_id))
graph
V(graph$cluster)
V(graph)$cluster
id1 = cluster_dists[min_row,1] # cluster id of first cluster
id2 = cluster_dists[min_row,2] # cluster id of second cluster
id1
id2
g
connect_clusters(X, g)
connect_clusters(X, g) {
connect_clusters = function(X, g) {
cluster_dists = get_cluster_dists(g)
min_row = which(cluster_dists[,3] == min(cluster_dists[,3]))
id1 = cluster_dists[min_row,1] # cluster id of first cluster
id2 = cluster_dists[min_row,2] # cluster id of second cluster
cluster1_vertex_ids = which(V(g)$cluster == id1) # vertex ids of points in cluster 1
cluster2_vertex_ids = which(V(g)$cluster == id2) # vertex ids of points in cluster 2
medoid1_ids = get_medoid(X[cluster1_vertex_ids,], cluster1_vertex_ids) # vertex id(s) of cluster 1 medoid
medoid2_ids = get_medoid(X[cluster2_vertex_ids,], cluster2_vertex_ids) # vertex id(s) of cluster 2 medoid
# find medoids with minimal distance (if one of the clusters has multiple)
min_dist = Inf
for (i in medoid1_ids) {
for (j in medoid2_ids) {
dist = norm(X[i,] - X[j,], type="2")
if(dist < min_dist) {
medoid1_id = i
medoid2_id = j
min_dist = dist
}
}
}
new_graph = add_edges(g, edges=c(medoid1_id, medoid2_id))
V(new_graph)$cluster[cluster2_vertex_ids] = id1
new_graph
}
g1 = connect_clusters(X, g)
g1
V(g(1))
V(g1)$cluster
get_avg_linkage_graph = function(X) {
n = length(X[,1])
g = make_graph(n=n, edges=NULL, directed=FALSE)
g = set_vertex_attr(g, name="cluster", value=1:n)
while(length(unique(V(g)$cluster)) != 1) {
g = connect_clusters(X, g)
}
}
get_avg_linkage_graph(X)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
source("Algorithms/DR assessment tool algs.R")
n = 20
p = 2
X = matrix(runif(n*p, min=-10, max=10))
g = get_avg_linkage_graph(X)
g
X
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
source("Algorithms/DR assessment tool algs.R")
n = 20
p = 2
X = matrix(runif(n*p, min=-10, max=10), nrow=n, ncol=p)
g = get_avg_linkage_graph(X)
g
X
X
debugSource("~/Desktop/Research/DR-assessment-tool/Algorithms/DR assessment tool algs.R", echo=TRUE)
g = get_avg_linkage_graph(X)
g
V(g)$clustr
V(g)$cluster
unique(V(g)$cluster)
g
V(g)
V(g)$cluster
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
source("Algorithms/DR assessment tool algs.R")
n = 20
p = 2
X = matrix(runif(n*p, min=-10, max=10), nrow=n, ncol=p)
g = get_avg_linkage_graph(X)
g
is.tree(g)
is_tree(g)
is_connected(g)
plot(g, layout=layout_with_kk)
h = get_mst(X)
plot(h, layout=layout_with_kk)
plot(g, layout=layout_with_kk)
g
V(g)$cluster
dist(X)[1,2]
dist(X)
dist(X)[2,1]
class(dist(X))
?dist.object
?dist
d[[c(1,2)]]
dist(X)[[c(1,2)]]
dist(X)[[c(2,1)]]
rowSums(dist(X))
dist(X)
dist(X)[[1:2]]
dist(X)[[1:3]]
dist(X)[[1:4]]
dist(X)[[c(1,2,3,4)]]
dist(X)[[c(1,2,3,4,8)]]
dist(X)[[c(1,2)]]
class(dist(X)[[c(1,2)]])
as.numeric(dist(X)[[c(1,2)]])
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
source("Algorithms/DR assessment tool algs.R")
n = 20
p = 2
X = matrix(runif(n*p, min=-10, max=10), nrow=n, ncol=p)
h = get_mst(X)
g = get_avg_linkage_graph(X)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
source("Algorithms/DR assessment tool algs.R")
n = 20
p = 2
X = matrix(runif(n*p, min=-10, max=10), nrow=n, ncol=p)
h = get_mst(X)
g = get_avg_linkage_graph(X)
plot(h, layout=layout_with_kk)
plot(g, layout=layout_with_kk)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
source("Algorithms/DR assessment tool algs.R")
n = 100
p = 50
X = matrix(runif(n*p, min=-10, max=10), nrow=n, ncol=p)
h = get_mst(X)
g = get_avg_linkage_graph(X)
plot(h, layout=layout_with_kk)
plot(g, layout=layout_with_kk)
X_dist = dist(X)
X_dist[[c(1,2,3,4,10)]]
norm(X[1,]-X[10,],type="2")
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
source("Algorithms/DR assessment tool algs.R")
n = 100
p = 50
X = matrix(runif(n*p, min=-10, max=10), nrow=n, ncol=p)
h = get_mst(X)
g = get_avg_linkage_graph(X)
plot(h, layout=layout_with_kk)
plot(g, layout=layout_with_kk)

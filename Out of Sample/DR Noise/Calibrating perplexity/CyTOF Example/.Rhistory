E(g)$id = seq_len(ecount(g))
g_mst = mst(g)
E(g_mst)$id
X = matrix(runif(12, min = -5, max = 5), ncol = 2)
g = graph_from_adjacency_matrix(as.matrix(dist(X)), mode="undirected", weighted=TRUE)
E(g)$id = seq_len(ecount(g))
g_mst = mst(g)
E(g)$color[E(g_mst)$id] = "red"
E(g)$color
X = matrix(runif(12, min = -5, max = 5), ncol = 2)
g = graph_from_adjacency_matrix(as.matrix(dist(X)), mode="undirected", weighted=TRUE)
E(g)$id = seq_len(ecount(g))
g_mst = mst(g)
E(g)$color = "black"
E(g)$color[E(g_mst)$id] = "red"
plot(g)
shortest_paths(g_mst,1,2)
E(g_mst)
class(E(g_mst))
class(E(g_mst)$id)
shortest_paths(g_mst,1,2)
class(shortest_paths(g_mst,1,2)$epath)
shortest_paths(g_mst,1,2, output="both")
class(shortest_paths(g_mst,1,2, output="both")$epath)
class(shortest_paths(g_mst,1,2, output="both")$epath[[1]])
class(shortest_paths(g_mst,1,2, output="both")$epath[[1]]$id)
shortest_paths(g_mst,1,2, output="both")$epath[[1]]$id
X = matrix(runif(12, min = -5, max = 5), ncol = 2)
g = graph_from_adjacency_matrix(as.matrix(dist(X)), mode="undirected", weighted=TRUE)
E(g)$id = seq_len(ecount(g))
g_mst = mst(g)
E(g)$color = "black"
shortest_paths(g_mst,1,2, output="both")
E(g)$color[shortest_paths(g_mst,1,2, output="both")$epath[[1]]$id] = "red"
X = matrix(runif(12, min = -5, max = 5), ncol = 2)
g = graph_from_adjacency_matrix(as.matrix(dist(X)), mode="undirected", weighted=TRUE)
E(g)$id = seq_len(ecount(g))
g_mst = mst(g)
E(g)$color = "black"
shortest_paths(g_mst,1,2, output="both")
E(g)$color[shortest_paths(g_mst,1,2, output="both")$epath[[1]]$id] = "red"
plot(g)
shortest_paths(g_mst,1,2, output="both")$epath[[1]]
length(shortest_paths(g_mst,1,2, output="both")$epath[[1]])
plot(g_mst)
length(shortest_paths(g_mst,1,6, output="both")$epath[[1]])
length(shortest_paths(g_mst,1,3, output="both")$epath[[1]])
?length
?distance
?edge_attr
?each_dge
?each_edge
shortest_paths(g_mst,1,3, output="both")$epath[[1]]
shortest_paths(g_mst,1,3, output="both")$epath[[1]][[1]]
shortest_paths(g_mst,1,3, output="both")$epath[[1]]
?sp
shortest_paths(g_mst,1,3, output="both")$epath[[2]]
shortest_paths(g_mst,1,3, output="both")$epath[[1]][[2]]
shortest_paths(g_mst,1,3, output="both")$epath[[1]][[3]]
shortest_paths(g_mst,1,3, output="both")$epath[[1]][[1]]
?check
class(shortest_paths(g_mst,1,3, output="both")$epath[[1]])
print("'asd'")
for (i in c("asd", "sd")) {print(i)}
shortest_paths(g_mst,1,3, output="both")$epath[[1]][[1]]
shortest_paths(g_mst,1,3, output="both")$epath[[1]][1
]
class(shortest_paths(g_mst,1,3, output="both")$epath[[1]][1])
class(shortest_paths(g_mst,1,3, output="both")$epath[[1]][[1]])
class(shortest_paths(g_mst,1,3, output="both")$epath[[1]][[1]])
length(shortest_paths(g_mst,1,3, output="both")$epath[[1]][1])
length(shortest_paths(g_mst,1,3, output="both")$epath[[1]][[2]])
length(shortest_paths(g_mst,1,3, output="both")$epath[[1]][])
class(shortest_paths(g_mst,1,3, output="both")$epath[[1]][])
for (i in shortest_paths(g_mst,1,3, output="both")$epath[[1]][]) {i}
for (i in shortest_paths(g_mst,1,3, output="both")$epath[[1]][]) {i$weight}
for (i in shortest_paths(g_mst,1,3, output="both")$epath[[1]][]) {class(i)}
for (i in shortest_paths(g_mst,1,3, output="both")$epath[[1]][]) {print(class(i))}
for (i in shortest_paths(g_mst,1,3, output="both")$epath[[1]][]) {print(i)}
shortest_paths(g_mst,1,3, output="both")$epath[[1]][])
shortest_paths(g_mst,1,3, output="both")$epath[[1]][]
print(shortest_paths(g_mst,1,3, output="both")$epath[[1]][])
print(shortest_paths(g_mst,1,3, output="both")$epath[[1]][1])
print(shortest_paths(g_mst,1,3, output="both")$epath[[1]][[1]])
length(shortest_paths(g_mst,1,3, output="both")$epath[[1]][])
class(length(shortest_paths(g_mst,1,3, output="both")$epath[[1]])
)
class(shortest_paths(g_mst,1,3, output="both")$epath)
class(shortest_paths(g_mst,1,3, output="both")$epath[[1]])
get_path_weights = function(path) {
if (class(path) != igraph.es) {
error("get_path_weights: input is not of type igraph.es")
}
num_paths = length(path[])
weights = vector(length = num_paths)
for (i in 1:num_paths) {
weights[i] = path[[i]]$weight
}
weights
}
p = shortest_paths(g_mst,1,3, output="both")$epath[[1]])
shortest_paths(g_mst,1,3, output="both")$epath
class(shortest_paths(g_mst,1,3, output="both")$epath)
class(shortest_paths(g_mst,1,3, output="both")$epath[[1]])
path = shortest_paths(g_mst,1,3, output="both")$epath[[1]]
get_path_weights(path)
get_path_weights = function(path) {
if (class(path) != "igraph.es") {
error("get_path_weights: input is not of type igraph.es")
}
num_paths = length(path[])
weights = vector(length = num_paths)
for (i in 1:num_paths) {
weights[i] = path[[i]]$weight
}
weights
}
get_weights(path)
get_path_weights(path)
?pwr.t.test
install.packages("pwrss")
library(pwrss)
?power.t.test
power.t.test(power.t.test(ncp = 1.96, df = 99, alpha = 0.05,
alternative = "equivalent", plot = TRUE))
?stats::power.t.test
stats::power.t.test(n = 30, delta = -1, sd = 1, type = "paired", alternative = "one.sided")
p = stats::power.t.test(n = 30, delta = -1, sd = 1, type = "paired", alternative = "one.sided")
atttributes(p)
attributes(p)
p$power
p = stats::power.t.test(n = 30, delta = -8, sd = 1, type = "paired", alternative = "one.sided")
p$power
p = stats::power.t.test(n = 30, delta = 8, sd = 1, type = "paired", alternative = "one.sided")
p$power
?remove.packages
remove.packages("pwrss")
?power.t.test
power.t.test(n = 10, delta = 3, sd = 1)
stats::power.t.test(n = 10, delta = 3, sd = 1)
stats::power.t.test(n = 10, delta = 2, sd = 1)
stats::power.t.test(n = 10, delta = 1, sd = 1)
stats::power.t.test(n = 10, delta = 2, sd = 2)
stats::power.t.test(n = c(10,10), delta = 2, sd = 2)
stats::power.t.test(n = c(10,10), delta = 2, sd = 2, type="paired")
stats::power.t.test(n = c(10,11), delta = 2, sd = 2, type="paired")
stats::power.t.test(n = c(10,50), delta = 2, sd = 2, type="paired")
p = stats::power.t.test(n = c(10,50), delta = 2, sd = 2, type="paired")
p$power
p = stats::power.t.test(n = c(10,50), delta = c(2,3), sd = 2, type="paired")
p
p$power
?power.t.test
knitr::opts_chunk$set(echo = TRUE)
n = seq(from = 5, to = 50, by = 5)
effect_size = c(0.1, 0.3, 0.5)
power.t.test(n = n, delta = effect_size, type = "paired", alternative = "one.sided")
n = seq(from = 5, to = 50, by = 5)
effect_size = c(0.1, 0.3, 0.5)
power.t.test(n = n, delta = effect_size[1], type = "paired", alternative = "one.sided")
n = seq(from = 5, to = 50, by = 5)
effect_size = c(0.1, 0.3, 0.5)
power = c(power.t.test(n = n, delta = effect_size[1], type = "paired", alternative = "one.sided")$power,
power.t.test(n = n, delta = effect_size[2], type = "paired", alternative = "one.sided")$power,
power.t.test(n = n, delta = effect_size[3], type = "paired", alternative = "one.sided")$power)
power
sapply(effect_size, function(x) power.t.test(n = n, delta = x, type = "paired", alternative = "one.sided")$power)
vapply(effect_size, function(x) power.t.test(n = n, delta = x, type = "paired", alternative = "one.sided")$power)
c(sapply(effect_size, function(x) power.t.test(n = n, delta = x, type = "paired", alternative = "one.sided")$power))
n = seq(from = 5, to = 50, by = 5)
effect_size = c(0.1, 0.3, 0.5)
power = c(sapply(effect_size, function(x) power.t.test(n = n, delta = x, type = "paired", alternative = "one.sided")$power))
df = data.frame(n = rep(n, length(effect_size)),
effect_size = rep(effect_size, each = n),
power)
df
n = seq(from = 5, to = 50, by = 5)
effect_size = c(0.1, 0.3, 0.5)
power = c(sapply(effect_size, function(x) power.t.test(n = n, delta = x, type = "paired", alternative = "one.sided")$power))
df = data.frame(n = rep(n, length(effect_size)),
effect_size = rep(effect_size, each = length(n)),
power)
df
ggplot(df, aes(x = n, y = power, group = effect_size)) +
geom_point() +
geom_line()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
n = seq(from = 5, to = 50, by = 5)
effect_size = c(0.1, 0.3, 0.5)
power = c(sapply(effect_size, function(x) power.t.test(n = n, delta = x, type = "paired", alternative = "one.sided")$power))
df = data.frame(n = rep(n, length(effect_size)),
effect_size = rep(effect_size, each = length(n)),
power)
ggplot(df, aes(x = n, y = power, group = effect_size)) +
geom_point() +
geom_line()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
n = seq(from = 5, to = 50, by = 5)
effect_size = c(0.1, 0.3, 0.5)
power = c(sapply(effect_size, function(x) power.t.test(n = n, delta = x, type = "paired", alternative = "one.sided")$power))
df = data.frame(n = rep(n, length(effect_size)),
effect_size = rep(effect_size, each = length(n)),
power)
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line()
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
n = seq(from = 5, to = 50, by = 5)
effect_size = c(0.1, 0.3, 0.5, 0.8)
power = c(sapply(effect_size, function(x) power.t.test(n = n, delta = x, type = "paired", alternative = "one.sided")$power))
df = data.frame(n = rep(n, length(effect_size)),
effect_size = rep(effect_size, each = length(n)),
power)
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
?geom_hline
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8) +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1)) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8) +
scale_y_continuous(breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1)) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dotted") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1)) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1)) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1)
sec.axis = sec_axis(~ . * 1.20, name = "mpg (UK)")) +
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = sec_axis(~ . * 1.20, name = "mpg (UK)")) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
?sec_axis
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = sec_axis(breaks = 0.8, labels = "asd") +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = sec_axis(breaks = 0.8, labels = "asd")) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = sec_axis(breaks = c(0.8), labels = c("asd"))) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = sec_axis(breaks = c(0.8, 1), labels = c("asd", "232"))) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec_axis(breaks = c(0.8, 1), labels = c("asd", "232"))) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = sec_axis(breaks = c(0.8, 1), labels = c("asd",), name="Asd")) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = sec_axis(trans = NULL, breaks = c(0.8, 1), labels = c("asd",))) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = dup_axis(breaks = c(0.8, 1), labels = c("asd",))) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = dup_axis(breaks = c(0.8, 1), labels = c("asd","
Sdf"))) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = dup_axis(breaks = 0.8, labels = "asd")) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = dup_axis(breaks = 0.8, labels = "Typical Desired Power Level")) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = dup_axis(breaks = 0.8, labels = "Typical Desired Power Level")) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = dup_axis(breaks = 0.8, labels = "Typical Desired Power Level")) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size") +
theme(legend.position = "left")
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = dup_axis(breaks = 0.8, labels = "Typical Desired Power Level"), name = NULL) +
labs(title = "One-Sided Paired t-Test Power Analysis",
x = "Sample Size",
y = "Power",
color = "Effect Size") +
theme(legend.position = "left")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
n = seq(from = 5, to = 80, by = 5)
effect_size = c(0.8, 0.5, 0.3, 0.1)
power = c(sapply(effect_size, function(x) power.t.test(n = n, delta = x, type = "paired", alternative = "one.sided")$power))
df = data.frame(n = rep(n, length(effect_size)),
effect_size = rep(effect_size, each = length(n)),
power)
ggplot(df, aes(x = n, y = power, group = effect_size, color = factor(effect_size))) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
scale_y_continuous(breaks = c(0.2, 0.4, 0.6, 0.8, 1),
sec.axis = dup_axis(breaks = 0.8, labels = "Typical Desired Power Level"), name = NULL) +
labs(x = "Sample Size",
y = "Power",
color = "Effect Size") +
theme(legend.position = "left")
df
?factor
pcau
pca
library(ggplot2)
library(MASS)
library(dplyr)
library(Rtsne)
library(viridis)
library(gridExtra)
source("~/Desktop/Research/out-of-sample-compare/Out of Sample/DR Noise/Calibrating perplexity/CyTOF Example/Trust vs Shep (full CyTOF).R", echo=TRUE)
source("../../../Algorithms/DR metrics.R")
setwd("~/Desktop/Research/out-of-sample-compare/Out of Sample/DR Noise/Calibrating perplexity/CyTOF Example")
source("../../../Algorithms/DR metrics.R")
data = read.delim("../../../../../CyTOF data/Exp1_NK_uns_CD4_inf.txt")
data = data %>%
select(-c(1,2)) %>%
sample_n(5000) %>%
mutate_all(function(x) log(1+x))
pca = prcomp(data, center = TRUE, scale. = TRUE, rank. = 20)
Z = pca$x
cumsum(pca$sdev)/sum(pca$sdev)
cumsum(pca$sdev[1:10])/sum(pca$sdev[1:10])
cumsum(pca$sdev[1:20])/sum(pca$sdev[1:20])
pca = prcomp(data, center = TRUE, scale. = TRUE, rank. = 10)
cumsum(pca$sdev[1:10])/sum(pca$sdev[1:10])
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(gridExtra)
library(viridis)
load("trust vs shep (umap CyTOF).Rda")
grid.arrange(p2, p1, nrow = 1)
q1 = ggplot(df, aes(x = n_neighbors, y = trust, col = n_neighbors)) +
geom_point(size = 2) +
scale_color_viridis() +
labs(x = "n_neighbors", y = "Trustworthiness", title = "Replicating Signal")
q2 = ggplot(df, aes(x = n_neighbors, y = trust_noise, col = n_neighbors)) +
geom_point(size = 2) +
scale_color_viridis() +
labs(x = "n_neighbors", y = "Trustworthiness", title = "Replicating Signal + Noise")
q3 = ggplot(df, aes(x = n_neighbors, y = shep, col = n_neighbors)) +
geom_point(size = 2) +
scale_color_viridis() +
labs(x = "n_neighbors", y = "Shepard Goodness", title = "Replicating Signal")
q4 = ggplot(df, aes(x = n_neighbors, y = shep_noise, col = n_neighbors)) +
geom_point(size = 2) +
scale_color_viridis() +
labs(x = "n_neighbors", y = "Shepard Goodness", title = "Replicating Signal + Noise")
grid.arrange(q2, q1, nrow = 1)
grid.arrange(q4, q3, nrow = 1)

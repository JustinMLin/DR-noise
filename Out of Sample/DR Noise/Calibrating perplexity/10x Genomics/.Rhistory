X = rbind(mvrnorm(n=20, mu=(c(4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=40, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=60, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=60, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=60, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=60, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-4,0)), Sigma=diag(c(1,1))),
mvrnorm(n=60, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=60, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=60, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=60, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=40, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=40, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=40, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=40, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=40, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
new_cluster = voronoi_kmeans(X, cluster)
data.frame(x=X[,1], y=X[,2], cluster=new_cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
new_cluster
cluster
update_cluster(X, cluster)
debugSource("~/Desktop/Research/weighted voronoi clustering/weighted voronoi clustering.R")
update_cluster(X, cluster)
sigma
means
cluster
length(cluster ==3)
nu
sum(cluster ==3)
sum(cluster ==2)
sum(cluster ==1)
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(MASS)
library(ggplot2)
library(dplyr)
source("weighted voronoi clustering.R")
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=40, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
new_cluster = voronoi_kmeans(X, cluster)
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(MASS)
library(ggplot2)
library(dplyr)
source("weighted voronoi clustering.R")
new_cluster = voronoi_kmeans(X, cluster)
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(MASS)
library(ggplot2)
library(dplyr)
source("weighted voronoi clustering.R")
new_cluster = voronoi_kmeans(X, cluster)
test
X[1,,drop=FALSE]
X
X[81,]
X[vector(0),]
X[c(),]
colMeans(X[c(),])
min(NaN)
which(c(1,NaN,2) == NaN)
NaN == NaN
Inf == Inf
debugSource("~/Desktop/Research/weighted voronoi clustering/weighted voronoi clustering.R")
new_cluster = voronoi_kmeans(X, cluster)
data.frame(x=X[,1], y=X[,2], cluster=new_cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
new_cluster = voronoi_kmeans(X, cluster)
new_cluster = voronoi_kmeans(X, cluster)
test = matrix(c(1,2,3,4),nrow=2)
test
update_cluster(test, c(NaN, 1))
update_cluster(test, c(Inf, 1))
colMeans(test[1,,drop=FALSE])
update_cluster(test, c(1,3))
update_cluster(test, c(1,2))
X[c(),]
colMeans(X[c(),])
nrow(X[c(),])
get_means = function(X, cluster) {
m = max(cluster)
p = ncol(X)
means = matrix(nrow=m, ncol=p)
for (i in 1:m) {
Xi = X[which(cluster == i),,drop=FALSE]
means[i,] = ifelse(nrow(Xi) == 0, rep(NA, p), colMeans(Xi))
}
means
}
get_means(test, c(1,3))
test
debugSource("~/Desktop/Research/weighted voronoi clustering/weighted voronoi clustering.R")
get_means(test, c(1,3))
X
Xi
means[1,]
Xi
colMeans(Xi)
means
means[1,]
means[1,] = colMeans(Xi)
means
Xi
Xi
colMenas(Xi)
i
colMeans(Xi)
means
means
x = 4 if TRUE else 3
get_means = function(X, cluster) {
m = max(cluster)
p = ncol(X)
means = matrix(nrow=m, ncol=p)
for (i in 1:m) {
Xi = X[which(cluster == i),,drop=FALSE]
if (nrow(Xi) == 0) {
means[i,] = rep(NA, p)
}
else {
means[i,] = colMeans(Xi)
}
}
means
}
get_means(test, c(1,3))
tabulate(c(1,1,3,3))
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(MASS)
library(ggplot2)
library(dplyr)
source("weighted voronoi clustering.R")
new_cluster = voronoi_kmeans(X, cluster)
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(MASS)
library(ggplot2)
library(dplyr)
source("weighted voronoi clustering.R")
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=40, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
new_cluster = voronoi_kmeans(X, cluster)
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(MASS)
library(ggplot2)
library(dplyr)
source("weighted voronoi clustering.R")
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=40, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
new_cluster = voronoi_kmeans(X, cluster)
debugSource("~/Desktop/Research/weighted voronoi clustering/weighted voronoi clustering.R")
new_cluster = voronoi_kmeans(X, cluster)
cluster
cluster
cluster
data.frame(x=X[,1], y=X[,2], cluster=new_cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
cluster_mat = matrix(nrow = 100, ncol=nrow(X))
cluster_mat[1,] = cluster
i = 2
while (i <= 100) {
cluster_mat[i,] = update_cluster(X, cluster_mat[i-1,])
i = i + 1
}
cluster_mat = matrix(nrow = 100, ncol=nrow(X))
cluster_mat[1,] = cluster
i = 2
while (i <= 100) {
cluster_mat[i,] = update_cluster(X, cluster_mat[i-1,])
i = i + 1
}
for (i in 1:100) {
data.frame(x=X[,1], y=X[,2], cluster=cluster_mat[i,]) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
}
cluster_mat = matrix(nrow = 100, ncol=nrow(X))
cluster_mat[1,] = cluster
i = 2
while (i <= 100) {
cluster_mat[i,] = update_cluster(X, cluster_mat[i-1,])
i = i + 1
}
for (i in 1:100) {
print(data.frame(x=X[,1], y=X[,2], cluster=cluster_mat[i,]) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point())
}
cluster_mat = matrix(nrow = 100, ncol=nrow(X))
cluster_mat[1,] = cluster
i = 2
while (i <= 100) {
cluster_mat[i,] = update_cluster(X, cluster_mat[i-1,])
i = i + 1
}
for (i in 1:10) {
print(data.frame(x=X[,1], y=X[,2], cluster=cluster_mat[i,]) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point())
}
X = rbind(mvrnorm(n=20, mu=(c(3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=20, mu=(c(-3,0)), Sigma=diag(c(1,1))),
mvrnorm(n=40, mu=(c(0,0)), Sigma=diag(c(2,2))))
cluster = kmeans(X, centers=3, iter.max=100, nstart=50)$cluster
data.frame(x=X[,1], y=X[,2], cluster=cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point()
cluster_mat = matrix(nrow = 100, ncol=nrow(X))
cluster_mat[1,] = cluster
i = 2
while (i <= 100) {
cluster_mat[i,] = update_cluster(X, cluster_mat[i-1,])
i = i + 1
}
for (i in 1:10) {
print(data.frame(x=X[,1], y=X[,2], cluster=cluster_mat[i,]) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) + geom_point())
}
gc()
?irlba
library(irlba)
?irlba
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(gridExtra)
load("../../../../../10x Data/10x data.Rda")
load("10x example small.Rda")
p1 = ggplot(df, aes(x=n_neighbors, y=trust)) +
geom_point(size = 2) +
geom_smooth(method="loess", se=FALSE, color="red") +
labs(x = "n_neighbors", y = "Trustworthiness")
p2 = ggplot(df, aes(x=n_neighbors, y=shep)) +
geom_point(size = 2) +
geom_smooth(method="loess", se=FALSE, color="red") +
labs(x = "n_neighbors", y = "Shepard Goodness")
grid.arrange(p1, p2, nrow = 1)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(gridExtra)
load("../../../../../10x Data/10x data.Rda")
load("10x example tiny.Rda")
p1 = ggplot(df, aes(x=n_neighbors, y=trust)) +
geom_point(size = 2) +
geom_smooth(method="loess", se=FALSE, color="red") +
labs(x = "n_neighbors", y = "Trustworthiness")
p2 = ggplot(df, aes(x=n_neighbors, y=shep)) +
geom_point(size = 2) +
geom_smooth(method="loess", se=FALSE, color="red") +
labs(x = "n_neighbors", y = "Shepard Goodness")
grid.arrange(p1, p2, nrow = 1)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(readr)
library(dbscan)
library(irlba)
load("../../../../../10x Data/10x data.Rda")
load("10x example small.Rda")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(readr)
library(dbscan)
library(irlba)
load("../../../../../10x Data/10x data.Rda")
load("10x example small.Rda")
mat = as.matrix(new_data)
total_var = sum(diag(t(mat) %*% mat))/nrow(mat)
gc()
sum(pca$sdev^2)/total_var
test = sapply(pca$sdev[1:100]^2, function(x) min(x, 100))
data.frame(x=1:100, sd=test) %>%
ggplot(aes(x=x, y=sd)) +
geom_col() +
ylim(0,100)
p1 = ggplot(df, aes(x=n_neighbors, y=trust_noise)) +
geom_point(size = 2) +
geom_smooth(method="loess", se=FALSE, color="red") +
labs(title = "Replicating Signal + Noise", x = "n_neighbors", y = "Trustworthiness")
p2 = ggplot(df, aes(x=n_neighbors, y=trust)) +
geom_point(size = 2) +
geom_smooth(method="loess", se=FALSE, color="red") +
labs(title = "Replicating Signal", x = "n_neighbors", y = "Trustworthiness")
grid.arrange(p1, p2, nrow = 1)
pca = prcomp_irlba(mat, n=200)
orig_cluster = kmeans(pca$x, centers = 3, nstart=100)
q1 = data.frame(x=best_X[,1], y=best_X[,2], cluster=orig_cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) +
geom_point()
dim(new_data)
load("10x example small.Rda")
load("Data/10x data.Rda")
load("../../../../../10x Data/10x data.Rda")
dim(pca$x)
Z = unname(pca$x[subsample,])
trans_umap = umap(Z, method = "umap-learn", n_neighbors = 10, n_components = 2)
library(umap)
library(reticulate)
use_python("/Users/justinlin/anaconda3/bin/python")
py_config()
py_available()
source_python("../../../Algorithms/TSNE.py", convert = FALSE)
trans_umap = umap(Z, method = "umap-learn", n_neighbors = 10, n_components = 2)
X_umap = trans_umap$layout
best_X_noise = X_umap
dim(X_umap)
setwd("~/Desktop/Research/out-of-sample-compare/Out of Sample/DR Noise/Calibrating perplexity/10x Genomics")
save(Y, df, subsample, best_X, best_n_neighbors, best_trust, best_X_noise, best_n_neighbors_noise, best_trust_noise, file = "10x example small.Rda")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(readr)
library(dbscan)
library(irlba)
load("../../../../../10x Data/10x data.Rda")
load("10x example small.Rda")
test = sapply(pca$sdev[1:100]^2, function(x) min(x, 100))
data.frame(x=1:100, sd=test) %>%
ggplot(aes(x=x, y=sd)) +
geom_col() +
ylim(0,100)
p1 = ggplot(df, aes(x=n_neighbors, y=trust_noise)) +
geom_point(size = 2) +
geom_smooth(method="loess", se=FALSE, color="red") +
labs(title = "Replicating Signal + Noise", x = "n_neighbors", y = "Trustworthiness")
p2 = ggplot(df, aes(x=n_neighbors, y=trust)) +
geom_point(size = 2) +
geom_smooth(method="loess", se=FALSE, color="red") +
labs(title = "Replicating Signal", x = "n_neighbors", y = "Trustworthiness")
grid.arrange(p1, p2, nrow = 1)
pca = prcomp_irlba(mat, n=200)
mat = as.matrix(new_data)
pca = prcomp_irlba(mat, n=200)
orig_cluster = kmeans(pca$x, centers = 3, nstart=100)
q1 = data.frame(x=best_X[,1], y=best_X[,2], cluster=orig_cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(cluster))) +
geom_point()
q1 = data.frame(x=best_X[,1], y=best_X[,2]) %>%
ggplot(aes(x=x, y=y)) +
geom_point()
q2 = data.frame(x=best_X_noise[,1], y=best_X_noise[,2]) %>%
ggplot(aes(x=x, y=y))) +
q1 = data.frame(x=best_X[,1], y=best_X[,2]) %>%
ggplot(aes(x=x, y=y)) +
geom_point()
q2 = data.frame(x=best_X_noise[,1], y=best_X_noise[,2]) %>%
ggplot(aes(x=x, y=y)) +
geom_point()
grid.arrange(q2, q1, nrow=1)
sum(pca$sdev^2)/total_var
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(readr)
library(dbscan)
library(irlba)
load("../../../../../10x Data/10x data.Rda")
load("10x example small.Rda")
?pca$x
dim(pca$x)
cluster = kmeans(pca$x[subsample,], centers=3, nstart=50)
cluster = kmeans(pca$x[subsample,], centers=3, nstart=50)
q1 = data.frame(x=best_X[,1], y=best_X[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
q2 = data.frame(x=best_X_noise[,1], y=best_X_noise[,2]) %>%
ggplot(aes(x=x, y=y)) +
geom_point()
grid.arrange(q2, q1, nrow=1)
cluster = kmeans(pca$x[subsample,], centers=3, nstart=50)
q1 = data.frame(x=best_X[,1], y=best_X[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
q2 = data.frame(x=best_X_noise[,1], y=best_X_noise[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
grid.arrange(q2, q1, nrow=1)
cluster = kmeans(pca$x[subsample,], centers=2, nstart=50)
q1 = data.frame(x=best_X[,1], y=best_X[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
q2 = data.frame(x=best_X_noise[,1], y=best_X_noise[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
grid.arrange(q2, q1, nrow=1)
cluster = kmeans(pca$x[subsample,], centers=3, nstart=50)
q1 = data.frame(x=best_X[,1], y=best_X[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
q2 = data.frame(x=best_X_noise[,1], y=best_X_noise[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
grid.arrange(q2, q1, nrow=1)
cluster = kmeans(pca$x[subsample,1:100], centers=3, nstart=50)
q1 = data.frame(x=best_X[,1], y=best_X[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
q2 = data.frame(x=best_X_noise[,1], y=best_X_noise[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
grid.arrange(q2, q1, nrow=1)
cluster = kmeans(pca$x[subsample,1:10], centers=3, nstart=50)
q1 = data.frame(x=best_X[,1], y=best_X[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
q2 = data.frame(x=best_X_noise[,1], y=best_X_noise[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
grid.arrange(q2, q1, nrow=1)
cluster = kmeans(pca$x[subsample,1:20], centers=3, nstart=50)
q1 = data.frame(x=best_X[,1], y=best_X[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
q2 = data.frame(x=best_X_noise[,1], y=best_X_noise[,2], col=cluster$cluster) %>%
ggplot(aes(x=x, y=y, color=factor(col))) +
geom_point()
grid.arrange(q2, q1, nrow=1)
x = c(1,3,4,5,5,3)
y = c(2, -0, 5, 4, 1)
df = data.frame(x=x, y=y)
x = c(1,3,4,5,5,3)
y = c(2, -0, 5, 4, 1, 2)
df = data.frame(x=x, y=y)
model = lm(y ~ x, data=df)
summary(model)

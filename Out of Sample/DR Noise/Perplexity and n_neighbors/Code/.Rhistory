library(umap)
?umap
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(gridExtra)
library(viridis)
load("trust vs shep (full CyTOF ex2).Rda")
grid.arrange(p2, p1, nrow = 1)
q1 = ggplot(df, aes(x = perplexity, y = trust, col = perplexity)) +
geom_point(size = 2) +
scale_color_viridis() +
labs(x = "Perplexity", y = "Trustworthiness", title = "Replicating Signal")
q2 = ggplot(df, aes(x = perplexity, y = trust_noise, col = perplexity)) +
geom_point(size = 2) +
scale_color_viridis() +
labs(x = "Perplexity", y = "Trustworthiness", title = "Replicating Signal + Noise")
q3 = ggplot(df, aes(x = perplexity, y = shep, col = perplexity)) +
geom_point(size = 2) +
scale_color_viridis() +
labs(x = "Perplexity", y = "Shepard Goodness", title = "Replicating Signal")
q4 = ggplot(df, aes(x = perplexity, y = shep_noise, col = perplexity)) +
geom_point(size = 2) +
scale_color_viridis() +
labs(x = "Perplexity", y = "Shepard Goodness", title = "Replicating Signal + Noise")
grid.arrange(q2, q1, nrow = 1)
grid.arrange(q4, q3, nrow = 1)
data = read.delim("../../../../../CyTOF data/Exp7_NK_uns_CD4_stim.txt")
View(data)
data = data %>%
select(-c(1,2))
library(ggplot2)
library(MASS)
library(dplyr)
library(Rtsne)
library(viridis)
library(gridExtra)
data = data %>%
select(-c(1,2))
min(data)
data = data %>%
select(-c(1,2)) %>%
sample_n(5000) %>%
mutate_all(function(x) log(2+x))
library(ggplot2)
library(MASS)
library(dplyr)
library(umap)
library(viridis)
library(gridExtra)
library(reticulate)
use_python("/Users/justinlin/anaconda3/bin/python")
py_config()
py_available()
before = Sys.time()
trans_umap = umap(Z, method = "umap-learn", n_neighbors = 20, n_components = 2)
pca = prcomp(data, center = TRUE, scale. = TRUE, rank. = 10)
Z = pca$x
before = Sys.time()
trans_umap = umap(Z, method = "umap-learn", n_neighbors = 20, n_components = 2)
after = Sys.time()
after - before
before = Sys.time()
trans_umap = umap(Z, method = "native", n_neighbors = 20, n_components = 2)
before = Sys.time()
trans_umap = umap(Z, method = "naive", n_neighbors = 20, n_components = 2)
after = Sys.time()
after - before
before = Sys.time()
trans_umap = umap(Z, method = "naive", n_neighbors = 20, n_components = 2)
library(umap)
before = Sys.time()
trans_umap = umap(Z, method = "naive", n_neighbors = 20, n_components = 2)
after = Sys.time()
after - before
library(ggplot2)
library(MASS)
library(dplyr)
library(umap)
library(viridis)
library(gridExtra)
# source("../../../Algorithms/DR metrics.R")
source("Algorithms/DR metrics.R")
source("../../../Algorithms/DR metrics.R")
data = read.delim("../../../../../CyTOF data/Exp1_NK_uns_CD4_inf.txt")
data = data %>%
select(-c(1,2)) %>%
sample_n(5000) %>%
mutate_all(function(x) log(1+x))
pca = prcomp(data, center = TRUE, scale. = TRUE, rank. = 10)
Z = pca$x
###
n = dim(Z)[1]
p = dim(Z)[2]
r = 2
Y = Z[,c(1,2)]
###
neighbors = c(20, 50, seq(from = 100, to = 1600, by = 100))
b = 20
k = 50
trusts = sheps = vector(length = length(neighbors)*b)
trusts_noise = sheps_noise = vector(length = length(neighbors)*b)
print("Starting loop!")
count = 1
for (i in 1:length(neighbors)) {
for (j in 1:b) {
trans_umap = umap(Z, method = "naive", n_neighbors = neighbors[i], n_components = 2)
X_umap = trans_umap$layout
sample_indices = sample(1:n, 200)
trusts[count] = trustworthiness_full_approx(Y, X_umap, k, sample_indices)
sheps[count] = dist_cor_full_approx(Y, X_umap, sample_indices)
trusts_noise[count] = trustworthiness_full_approx(Z, X_umap, k, sample_indices)
sheps_noise[count] = dist_cor_full_approx(Z, X_umap, sample_indices)
print(paste0(count, "/", length(neighbors)*b, " loops complete!"))
count = count + 1
}
}
i
j
trans_umap = umap(Z, method = "naive", n_neighbors = neighbors[i], n_components = 2)
X_umap = trans_umap$layout
sample_indices = sample(1:n, 200)
trusts[count] = trustworthiness_full_approx(Y, X_umap, k, sample_indices)
Z
X_umap
sheps[count] = dist_cor_full_approx(Y, X_umap, sample_indices)
trusts[1]
sheps[1]
trusts_noise[count] = trustworthiness_full_approx(Z, X_umap, k, sample_indices)
sheps_noise[count] = dist_cor_full_approx(Z, X_umap, sample_indices)
print(paste0(count, "/", length(neighbors)*b, " loops complete!"))
count = count + 1
j = 2
trans_umap = umap(Z, method = "naive", n_neighbors = neighbors[i], n_components = 2)
X_umap = trans_umap$layout
sample_indices = sample(1:n, 200)
trusts[count] = trustworthiness_full_approx(Y, X_umap, k, sample_indices)
sheps[count] = dist_cor_full_approx(Y, X_umap, sample_indices)
trusts_noise[count] = trustworthiness_full_approx(Z, X_umap, k, sample_indices)
sheps_noise[count] = dist_cor_full_approx(Z, X_umap, sample_indices)
print(paste0(count, "/", length(neighbors)*b, " loops complete!"))
count = count + 1
library(umap)
?umap
length(seq(from = 50, to = 650, by = 50))
